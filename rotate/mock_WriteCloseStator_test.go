// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stkali/utility/rotate (interfaces: WriteCloseStator)
//
// Generated by this command:
//
//	mockgen -package rotate -destination mock_WriteCloseStator_test.go github.com/stkali/utility/rotate WriteCloseStator
//

// Package rotate is a generated GoMock package.
package rotate

import (
	fs "io/fs"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWriteCloseStator is a mock of WriteCloseStator interface.
type MockWriteCloseStator struct {
	ctrl     *gomock.Controller
	recorder *MockWriteCloseStatorMockRecorder
}

// MockWriteCloseStatorMockRecorder is the mock recorder for MockWriteCloseStator.
type MockWriteCloseStatorMockRecorder struct {
	mock *MockWriteCloseStator
}

// NewMockWriteCloseStator creates a new mock instance.
func NewMockWriteCloseStator(ctrl *gomock.Controller) *MockWriteCloseStator {
	mock := &MockWriteCloseStator{ctrl: ctrl}
	mock.recorder = &MockWriteCloseStatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriteCloseStator) EXPECT() *MockWriteCloseStatorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockWriteCloseStator) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockWriteCloseStatorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWriteCloseStator)(nil).Close))
}

// Stat mocks base method.
func (m *MockWriteCloseStator) Stat() (fs.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat")
	ret0, _ := ret[0].(fs.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockWriteCloseStatorMockRecorder) Stat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockWriteCloseStator)(nil).Stat))
}

// Write mocks base method.
func (m *MockWriteCloseStator) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockWriteCloseStatorMockRecorder) Write(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWriteCloseStator)(nil).Write), arg0)
}
